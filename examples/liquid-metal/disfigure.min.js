/*! disfigure v0.0.5 */
import { uniform as a, Fn as e, If as i, transformNormalToView as l, vec3 as m, positionGeometry as n, mix as o, normalGeometry as r, float as s, mat3 as t, select as u } from "three/tsl"; import * as h from "three"; import { Mesh as d, Box3 as f, Vector3 as g, MeshPhysicalNodeMaterial as p } from "three"; import * as c from "three/addons/libs/lil-gui.module.min.js"; import { OrbitControls as v } from "three/addons/controls/OrbitControls.js"; const y=e( ( ([ e ])=>{

		var a=e.cos().toVar(), o=e.sin().toVar(); return t( 1, 0, 0, 0, a, o, 0, o.negate(), a );

	} ) ).setLayout( { name: "matRotX", type: "mat3", inputs: [ { name: "angle", type: "float" } ] } ), L=e( ( ([ e ])=>{

		var a=e.cos().toVar(), o=e.sin().toVar(); return t( a, 0, o.negate(), 0, 1, 0, o, 0, a );

	} ) ).setLayout( { name: "matRotY", type: "mat3", inputs: [ { name: "angle", type: "float" } ] } ), R=e( ( ([ e ])=>{

		var a=e.cos().toVar(), o=e.sin().toVar(); return t( a, o, 0, o.negate(), a, 0, 0, 0, 1 );

	} ) ).setLayout( { name: "matRotZ", type: "mat3", inputs: [ { name: "angle", type: "float" } ] } ), x=e( ( ([ e ])=>{

		var t=y( e.x ), a=L( e.y ), o=R( e.z ); return a.mul( t ).mul( o );

	} ) ).setLayout( { name: "matRotYXZ", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), w=e( ( ([ e ])=>{

		var t=y( e.x ), a=L( e.y ), o=R( e.z ); return a.mul( o ).mul( t );

	} ) ).setLayout( { name: "matRotYZX", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), b=e( ( ([ e ])=>{

		var t=y( e.x ), a=L( e.y ), o=R( e.z ); return t.mul( a ).mul( o );

	} ) ).setLayout( { name: "matRotXYZ", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), k=e( ( ([ e ])=>{

		var t=y( e.x ), a=L( e.y ), o=R( e.z ); return t.mul( o ).mul( a );

	} ) ).setLayout( { name: "matRotXZY", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), M=e( ( ([ e ])=>{

		var t=y( e.x ), a=L( e.y ); return R( e.z ).mul( t ).mul( a );

	} ) ).setLayout( { name: "matRotZXY", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), P=e( ( ([ e ])=>{

		var t=y( e.x ), a=L( e.y ); return R( e.z ).mul( a ).mul( t );

	} ) ).setLayout( { name: "matRotZYX", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ); function S( e, t, a, o ) {

	return function ( e ) {

		var t=[]; e.traverse( ( e=>{

			if ( e.isMesh ) {

				var a=e.geometry.clone().applyMatrix4( e.matrixWorld ), o=e.material.clone(); t.push( new d( a, o ) );

			}

		} ) ), e.clear(), e.position.set( 0, 0, 0 ), e.rotation.set( 0, 0, 0, "XYZ" ), e.scale.set( 1, 1, 1 ), e.add( ...t );

	}( e ), function ( e, t, a, o ) {

		e.traverse( ( e=>{

			if ( e.isMesh ) {

				var s=new p(); Object.assign( s, e.material ), s.metalness=1, s.roughness=0, o.colorNode&&( s.colorNode=o.colorNode() ), o.positionNode&&( s.positionNode=o.positionNode( { skeleton: t, posture: a } ) ), o.normalNode&&( s.normalNode=o.normalNode( { skeleton: t, posture: a } ) ), o.emissiveNode&&( s.emissiveNode=o.emissiveNode( { skeleton: t, posture: a } ) ), e.material=s;

			}

		} ) );

	}( e, t, a, o ), function ( e ) {

		var t=new g(); ( new f() ).setFromObject( e, !0 ).getCenter( t ), e.position.sub( t );

	}( e ), e;

}

function z( e, t ) {

	var a=new XMLHttpRequest(); a.onreadystatechange=function () {

		4==this.readyState&&200==this.status&&( document.getElementById( t ).innerHTML=this.responseText.split( "||" )[ 0 ]);

	}, ( e=e.split( "." ) ).pop(), e.push( "txt" ), e=e.join( "." ), a.open( "GET", e, !0 ), a.send();

}

var N=new h.Scene(); N.background=new h.Color( "whitesmoke" ); var B=new h.PerspectiveCamera( 30, innerWidth/innerHeight ); B.position.set( -2, 1, 3.5 ), B.lookAt( N.position ); var E=new h.WebGPURenderer( { antialias: !0 } ); E.outputColorSpace=h.LinearSRGBColorSpace, E.setSize( innerWidth, innerHeight ), document.body.appendChild( E.domElement ), window.addEventListener( "resize", ( ()=>{

	B.aspect=innerWidth/innerHeight, B.updateProjectionMatrix(), E.setSize( innerWidth, innerHeight );

} ) ); var A=new v( B, E.domElement ); A.enableDamping=!0, A.dampingFactor=.05, A.autoRotate=!0, A.autoRotateSpeed=.5; var T=new h.AmbientLight( "white", 1 ); N.add( T ); var V=new h.DirectionalLight( "white", 2 ); V.position.set( 0, 0, 1 ), N.add( V ); var F, I=new h.AxesHelper(), q={ animate: !1 }, H={ isolated: !1, randomize: function ( e=h.MathUtils.randInt( Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER ) ) {

		function t( e=-1, t=1 ) {

			return h.MathUtils.seededRandom()*( t-e )+e;

		}

		h.MathUtils.seededRandom( e ), C.rotation.y+=t()-.2, j.waist.value.set( t()/4-.2, t()/2, t()/2.5 ), j.chest.value.set( t()/3, 0, t()/3 ), j.head.value.set( t()/2, t()/2, t()/3 ), j.kneeLeft.value.set( -( t()+1 )/1.5, 0, 0 ), j.kneeRight.value.set( -( t()+1 )/1.5, 0, 0 ), j.footLeft.value.set( .5*t()+.15, 0, 0 ), j.footRight.value.set( .5*t()+.15, 0, 0 ), j.ankleLeft.value.set( t()/2, 0, t()/4 ), j.ankleRight.value.set( t()/2, 0, t()/4 ), j.legLeft.value.set( 0, t()-.25, 0 ), j.legRight.value.set( 0, t()+.25, 0 ), j.hipLeft.value.set( t()/1+.25, 0, -( t()+1 )/4 ), j.hip2Left.value.set( 0, t(), 0 ), j.hipRight.value.set( t()/1+.25, 0, ( t()+1 )/4 ), j.hip2Right.value.set( 0, t(), 0 ), j.elbowLeft.value.set( 0, t()+1, 0 ), j.elbowRight.value.set( 0, -( t()+1 ), 0 ), j.forearmLeft.value.set( .5*( 1.5*t()+1 ), 0, 0 ), j.forearmRight.value.set( .5*( 1.5*t()+1 ), 0, 0 ), j.wristLeft.value.set( 0, .5*t()+.1, .7*t() ), j.wristRight.value.set( 0, .5*t()+.1, -.7*t() ), j.armLeft.value.set( .7*( t()/1.5-.15 ), 0, .7*t() ), j.armRight.value.set( .7*( t()/1.5-.15 ), 0, .7*t() ), Y();

	} }, j={}, G={}, C=new h.Group(); function W( e, t, o ) {

	G=e, ( j=t ).select=a( 0, "int" ), j.isolated=a( 0, "int" ), C=o, ( F=new c.GUI() ).domElement.style.marginRight=0; var s=F.addFolder( "DEBUG" ); function n( e, t, a="" ) {

		return `<div class="padded ${a}">${e} &nbsp; <span class="icon">${t}</span></div>`;

	}

	return s.close(), s.add( j.select, "value", { Nothing: 0, Head: 1, Chest: 2, Waist: 3, Hip: 11, Hip2: 15, Leg: 12, Knee: 13, Ankle: 14, Foot: 16, Arm: 21, Elbow: 22, Forearm: 23, Wrist: 24 } ).name( "Show" ).onChange( X ), s.add( H, "isolated", !1 ).name( "Isolated" ).onChange( ( ()=>{

		j.isolated.value=H.isolated?1:0;

	} ) ), s.add( q, "animate", !1 ).name( "Animate" ), s.add( H, "randomize" ).name( "Randomize" ), ( s=F.addFolder( "TORSO" ) ).add( j.head.value, "x", -.7, .5 ).name( n( "Head", "&#x2195;" ) ), s.add( j.head.value, "z", -.5, .5 ).name( n( "", "&#x21B6;" ) ), s.add( j.head.value, "y", -1, 1 ).name( n( "", "&#x2194;" ) ), s.add( j.chest.value, "x", -.7, .4 ).name( n( "Chest", "&#x2195;", "border" ) ), s.add( j.chest.value, "z", -.5, .5 ).name( n( "", "&#x21B6;" ) ), s.add( j.waist.value, "x", -1, .6 ).name( n( "Waist", "&#x2195;", "border" ) ), s.add( j.waist.value, "z", -.5, .5 ).name( n( "", "&#x21B6;" ) ), s.add( j.waist.value, "y", -1, 1 ).name( n( "", "&#x2194;" ) ), ( s=F.addFolder( "LEFT LEG" ).close() ).add( j.hipLeft.value, "x", -.6, 2.7 ).name( n( "Leg", "&#x2195;" ) ), s.add( j.hipLeft.value, "z", -2.4, .2 ).name( n( "", "&#x21BA;" ) ), s.add( j.hip2Left.value, "y", -1.4, 1.4 ).name( n( "", "&#x2194;" ) ), s.add( j.kneeLeft.value, "x", -2.6, 0 ).name( n( "Knee", "&#x2195;", "border" ) ), s.add( j.ankleLeft.value, "x", -1, .7 ).name( n( "Ankle", "&#x2195;", "border" ) ), s.add( j.legLeft.value, "y", -3, 3 ).name( n( "", "&#x2194;" ) ), s.add( j.ankleLeft.value, "z", -.5, .5 ).name( n( "", "&#x21BA;" ) ), s.add( j.footLeft.value, "x", -.3, .6 ).name( n( "Foot", "&#x2195;", "border" ) ), ( s=F.addFolder( "RIGHT LEG" ).close() ).add( j.hipRight.value, "x", -.6, 2.7 ).name( n( "Leg", "&#x2195;" ) ), s.add( j.hipRight.value, "z", -.2, 2.4 ).name( n( "", "&#x21BB;" ) ), s.add( j.hip2Right.value, "y", -1.4, 1.4 ).name( n( "", "&#x2194;" ) ), s.add( j.kneeRight.value, "x", -2.6, 0 ).name( n( "Knee", "&#x2195;", "border" ) ), s.add( j.ankleRight.value, "x", -1, .7 ).name( n( "Ankle", "&#x2195;", "border" ) ), s.add( j.legRight.value, "y", -3, 3 ).name( n( "", "&#x2194;" ) ), s.add( j.ankleRight.value, "z", -.5, .5 ).name( n( "", "&#x21BB;" ) ), s.add( j.footRight.value, "x", -.3, .6 ).name( n( "Foot", "&#x2195;", "border" ) ), ( s=F.addFolder( "LEFT ARM" ).close() ).add( j.armLeft.value, "z", -1.5, 1.7 ).name( n( "Arm", "&#x2195;" ) ), s.add( j.armLeft.value, "y", -.5, 2 ).name( n( "", "&#x2194;" ) ), s.add( j.armLeft.value, "x", -.5, .5 ).name( n( "", "&#x21BB;" ) ), s.add( j.elbowLeft.value, "y", 0, 2.7 ).name( n( "Elbow", "&#x2195;", "border" ) ), s.add( j.wristLeft.value, "z", -1.4, 1.4 ).name( n( "Wrist", "&#x2195;", "border" ) ), s.add( j.wristLeft.value, "y", -.6, .4 ).name( n( "", "&#x2194;" ) ), s.add( j.forearmLeft.value, "x", -1.5, 3 ).name( n( "", "&#x21BB;" ) ), ( s=F.addFolder( "RIGHT ARM" ).close() ).add( j.armRight.value, "z", -1.5, 1.7 ).name( n( "Arm", "&#x2195;" ) ), s.add( j.armRight.value, "y", -2, .5 ).name( n( "", "&#x2194;" ) ), s.add( j.armRight.value, "x", -.5, .5 ).name( n( "", "&#x21BB;" ) ), s.add( j.elbowRight.value, "y", -2.7, 0 ).name( n( "Elbow", "&#x2195;", "border" ) ), s.add( j.wristRight.value, "z", -1.4, 1.4 ).name( n( "Wrist", "&#x2195;", "border" ) ), s.add( j.wristRight.value, "y", -.4, .6 ).name( n( "", "&#x2194;" ) ), s.add( j.forearmRight.value, "x", -1.5, 3 ).name( n( "", "&#x21BB;" ) ), F;

}

function X( e ) {

	switch ( C.add( I ), e ) {

		case 1:I.position.copy( G.headPos ); break; case 2:I.position.copy( G.chestPos ); break; case 3:I.position.copy( G.waistPos ); break; case 11:I.position.copy( G.hipLeftPos ); break; case 15:I.position.copy( G.hip2LeftPos ); break; case 12:I.position.copy( G.legLeftPos ); break; case 13:I.position.copy( G.kneeLeftPos ); break; case 14:I.position.copy( G.ankleLeftPos ); break; case 16:I.position.copy( G.footLeftPos ); break; case 21:I.position.copy( G.armLeftPos ); break; case 22:I.position.copy( G.elbowLeftPos ); break; case 23:I.position.copy( G.forearmLeftPos ); break; case 24:I.position.copy( G.wristLeftPos ); break; default:C.remove( I );

	}

}

function Y() {

	for ( var e of F.controllersRecursive() )e.updateDisplay();

}

function Z( { waistSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function U( { headSpan: e } ) {

	return n.y.add( n.z.div( 3 ) ).smoothstep( e.x, e.y );

}

function O( { chestSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function D( { kneeLeftSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function _( { kneeRightSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function K( { ankleLeftSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function $( { ankleRightSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function J( { footLeftSpan: e, ankleLeftSpan: t } ) {

	return n.z.smoothstep( e.x, e.y ).mul( n.y.step( t.y ) );

}

function Q( { footRightSpan: e, ankleRightSpan: t } ) {

	return n.z.smoothstep( e.x, e.y ).mul( n.y.step( t.y ) );

}

function ee( { legLeftSpan: e } ) {

	return n.y.smoothstep( e.x, e.y ).pow( 1 );

}

function te( { legRightSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function ae( { hipLeftSpan: e } ) {

	var t=n.x, a=n.y; return a.sub( t.mul( 2 ) ).smoothstep( e.z, s( e.w ).sub( t.mul( 1.6 ) ) ).mul( a.smoothstep( e.x, e.y ) ).mul( t.smoothstep( -.01, .01 ) );

}

function oe( { hip2LeftSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function se( { hipRightSpan: e } ) {

	var t=n.x, a=n.y; return a.add( t.mul( 2 ) ).smoothstep( e.z, s( e.w ).add( t.mul( 1.6 ) ) ).mul( a.smoothstep( e.x, e.y ) ).mul( t.smoothstep( .01, -.01 ) );

}

function ne( { hip2RightSpan: e } ) {

	return n.y.smoothstep( e.x, e.y );

}

function ie( { elbowLeftSpan: e } ) {

	return n.x.smoothstep( e.x, e.y );

}

function re( { elbowRightSpan: e } ) {

	return n.x.smoothstep( e.x, e.y );

}

function le( { forearmLeftSpan: e } ) {

	return n.x.smoothstep( e.x, e.y );

}

function ue( { forearmRightSpan: e } ) {

	return n.x.smoothstep( e.x, e.y );

}

function me( { wristLeftSpan: e } ) {

	return n.x.smoothstep( e.x, e.y );

}

function he( { wristRightSpan: e } ) {

	return n.x.smoothstep( e.x, e.y );

}

function de( { armLeftSpan: e } ) {

	var t=n.x, a=n.y; return t.smoothstep( e.x, e.y ).mul( a.smoothstep( e.z, e.w ) );

}

function pe( { armRightSpan: e } ) {

	var t=n.x, a=n.y; return t.smoothstep( e.x, e.y ).mul( a.smoothstep( e.z, e.w ) );

}

E.setAnimationLoop( ( function ( e ) {

	var t; q.animate&&( t=e/1e3, j.waist.value.set( Math.sin( t )/4-.2, Math.cos( 1.2*t )/2, Math.sin( 3*t )/2.5 ), j.chest.value.set( Math.cos( 3*t )/3, 0, Math.cos( 3*t*1.5 )/3 ), j.head.value.set( Math.cos( 3*t )/2, Math.sin( 1.2*t*2 )/2, Math.cos( 3*t*1.5 )/3 ), j.kneeLeft.value.set( -( Math.cos( 3*t )+1 )/1.5, 0, 0 ), j.kneeRight.value.set( -( Math.sin( 2.4*t )+1 )/1.5, 0, 0 ), j.footLeft.value.set( .5*Math.cos( 1.7*t )+.15, 0, 0 ), j.footRight.value.set( .5*Math.sin( 1.9*t )+.15, 0, 0 ), j.ankleLeft.value.set( Math.cos( 3*t )/2, 0*Math.cos( 2.8*t )/2, Math.cos( 2.2*t )/4 ), j.ankleRight.value.set( Math.sin( 3.2*t )/2, 0*Math.cos( 2.3*t )/2, Math.sin( 2.1*t )/4 ), j.legLeft.value.set( 0, Math.cos( 2.8*t )-.25, 0 ), j.legRight.value.set( 0, Math.cos( 2.3*t )+.25, 0 ), j.hipLeft.value.set( Math.cos( 3*t )/1+.25, 0, -( Math.cos( 2.2*t )+1 )/4 ), j.hip2Left.value.set( 0, Math.cos( 2.8*t ), 0 ), j.hipRight.value.set( Math.sin( 2.2*t )/1+.25, 0, ( Math.sin( 2.6*t )+1 )/4 ), j.hip2Right.value.set( 0, Math.sin( 3.2*t ), 0 ), j.elbowLeft.value.set( 0, Math.cos( 2*t-1 )+1, 0 ), j.elbowRight.value.set( 0, -( Math.sin( 1.8*t )+1 ), 0 ), j.forearmLeft.value.set( .5*( 1.5*Math.cos( 3.6*t-1 )+1 ), 0, 0 ), j.forearmRight.value.set( .5*( 1.5*Math.sin( 1.8*t*3+1 )+1 ), 0, 0 ), j.wristLeft.value.set( 0, .5*Math.cos( 3.6*t-1 )+.1, .7*Math.cos( 2.6*t+1 ) ), j.wristRight.value.set( 0, .5*Math.cos( 3.6*t-1 )+.1, -.7*Math.cos( 2.6*t+1 ) ), j.armLeft.value.set( .7*( Math.cos( 3*t )/1.5-.15 ), 0, .7*Math.cos( 2.2*t ) ), j.armRight.value.set( .7*( Math.sin( 2.4*t )/1.5-.15 ), 0, .7*Math.sin( 2.7*t ) ), Y() ), A.update(), V.position.copy( B.position ), E.render( N, B );

} ) ); var ge=e( ( ([ e, t, a, o ])=>e.sub( t ).mul( x( a.mul( o ) ) ).add( t ) ) ).setLayout( { name: "jointRotate", type: "vec3", inputs: [ { name: "pos", type: "vec3" }, { name: "center", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ), fe=e( ( ([ e, t, a ])=>e.mul( x( t.mul( a ) ) ) ) ).setLayout( { name: "jointRotateNormal", type: "vec3", inputs: [ { name: "nor", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ), ce=e( ( ([ e, t, a, o ])=>e.sub( t ).mul( w( a.mul( o ) ) ).add( t ) ) ).setLayout( { name: "jointRotateLeg", type: "vec3", inputs: [ { name: "pos", type: "vec3" }, { name: "center", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ), ve=e( ( ([ e, t, a ])=>e.mul( w( t.mul( a ) ) ) ) ).setLayout( { name: "jointRotateNormalLeg", type: "vec3", inputs: [ { name: "nor", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ), ye=e( ( ([ e, t, a, n ])=>o( e, e.sub( t ).mul( k( a.mul( n ) ) ).mul( s( 1 ).sub( n.mul( 2*Math.PI ).sub( Math.PI ).cos().add( 1 ).div( 2 ).div( 4 ).mul( a.z.cos().oneMinus() ) ) ).add( t ), n.pow( .25 ) ) ) ).setLayout( { name: "jointRotate2", type: "vec3", inputs: [ { name: "pos", type: "vec3" }, { name: "center", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ), Le=e( ( ([ e, t, a ])=>o( e, e.mul( k( t.mul( a ) ) ).mul( s( 1 ).sub( a.mul( 2*Math.PI ).sub( Math.PI ).cos().add( 1 ).div( 2 ).div( 4 ).mul( t.z.cos().oneMinus() ) ) ), a.pow( .25 ) ) ) ).setLayout( { name: "jointRotateNormal2", type: "vec3", inputs: [ { name: "nor", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ), Re=e( ( ( { skeleton: e, posture: t } )=>{

		var a=n.toVar(), o=de( e ).toVar(); i( o.greaterThan( 0 ), ( ()=>{

			a.assign( ge( a, e.wristLeftPos, t.wristLeft, me( e ) ) ), a.assign( ge( a, e.forearmLeftPos, t.forearmLeft, le( e ) ) ), a.assign( ge( a, e.elbowLeftPos, t.elbowLeft, ie( e ) ) ), a.assign( ye( a, e.armLeftPos, t.armLeft, o ) );

		} ) ); var s=pe( e ).toVar(); i( s.greaterThan( 0 ), ( ()=>{

			a.assign( ge( a, e.wristRightPos, t.wristRight, he( e ) ) ), a.assign( ge( a, e.forearmRightPos, t.forearmRight, ue( e ) ) ), a.assign( ge( a, e.elbowRightPos, t.elbowRight, re( e ) ) ), a.assign( ye( a, e.armRightPos, t.armRight, s ) );

		} ) ), a.assign( ge( a, e.headPos, t.head, U( e ) ) ), a.assign( ge( a, e.chestPos, t.chest, O( e ) ) ), a.assign( ge( a, e.waistPos, t.waist, Z( e ) ) ); var r=ae( e ).toVar(); i( r.greaterThan( 0 ), ( ()=>{

			a.assign( ge( a, e.footLeftPos, t.footLeft, J( e ) ) ), a.assign( ge( a, e.ankleLeftPos, t.ankleLeft, K( e ) ) ), a.assign( ge( a, e.legLeftPos, t.legLeft, ee( e ) ) ), a.assign( ge( a, e.kneeLeftPos, t.kneeLeft, D( e ) ) ), a.assign( ce( a, e.hip2LeftPos, t.hip2Left, oe( e ) ) ), a.assign( ce( a, e.hipLeftPos, t.hipLeft, r ) );

		} ) ); var l=se( e ).toVar(); return i( l.greaterThan( 0 ), ( ()=>{

			a.assign( ge( a, e.footRightPos, t.footRight, Q( e ) ) ), a.assign( ge( a, e.ankleRightPos, t.ankleRight, $( e ) ) ), a.assign( ge( a, e.legRightPos, t.legRight, te( e ) ) ), a.assign( ge( a, e.kneeRightPos, t.kneeRight, _( e ) ) ), a.assign( ce( a, e.hip2RightPos, t.hip2Right, ne( e ) ) ), a.assign( ce( a, e.hipRightPos, t.hipRight, l ) );

		} ) ), a;

	} ) ), xe=e( ( ( { skeleton: e, posture: t } )=>{

		var a=r.toVar(), o=de( e ).toVar(); i( o.greaterThan( 0 ), ( ()=>{

			a.assign( fe( a, t.wristLeft, me( e ) ) ), a.assign( fe( a, t.forearmLeft, le( e ) ) ), a.assign( fe( a, t.elbowLeft, ie( e ) ) ), a.assign( Le( a, t.armLeft, o ) );

		} ) ); var s=pe( e ).toVar(); i( s.greaterThan( 0 ), ( ()=>{

			a.assign( fe( a, t.wristRight, he( e ) ) ), a.assign( fe( a, t.forearmRight, ue( e ) ) ), a.assign( fe( a, t.elbowRight, re( e ) ) ), a.assign( Le( a, t.armRight, s ) );

		} ) ), a.assign( fe( a, t.head, U( e ) ) ), a.assign( fe( a, t.chest, O( e ) ) ), a.assign( fe( a, t.waist, Z( e ) ) ); var n=ae( e ).toVar(); i( n.greaterThan( 0 ), ( ()=>{

			a.assign( fe( a, t.footLeft, J( e ) ) ), a.assign( fe( a, t.ankleLeft, K( e ) ) ), a.assign( fe( a, t.legLeft, ee( e ) ) ), a.assign( fe( a, t.kneeLeft, D( e ) ) ), a.assign( ve( a, t.hip2Left, oe( e ) ) ), a.assign( ve( a, t.hipLeft, n ) );

		} ) ); var u=se( e ).toVar(); return i( u.greaterThan( 0 ), ( ()=>{

			a.assign( fe( a, t.footRight, Q( e ) ) ), a.assign( fe( a, t.ankleRight, $( e ) ) ), a.assign( fe( a, t.legRight, te( e ) ) ), a.assign( fe( a, t.kneeRight, _( e ) ) ), a.assign( ve( a, t.hip2Right, ne( e ) ) ), a.assign( ve( a, t.hipRight, u ) );

		} ) ), l( a ).normalize();

	} ) ), we=e( ( ( { skeleton: e, posture: t } )=>{

		var a=t.select, o=s( 0 ).add( U( e ).mul( u( a.equal( 1 ), 1, 0 ) ) ).add( O( e ).mul( u( a.equal( 2 ), 1, 0 ) ) ).add( Z( e ).mul( u( a.equal( 3 ), 1, 0 ) ) ).add( ae( e ).mul( u( a.equal( 11 ), 1, 0 ) ) ).add( ee( e ).mul( u( a.equal( 12 ), 1, 0 ) ) ).add( D( e ).mul( u( a.equal( 13 ), 1, 0 ) ) ).add( K( e ).mul( u( a.equal( 14 ), 1, 0 ) ) ).add( J( e ).mul( u( a.equal( 16 ), 1, 0 ) ) ).add( oe( e ).mul( u( a.equal( 15 ), 1, 0 ) ) ).add( de( e ).mul( u( a.equal( 21 ), 1, 0 ) ) ).add( ie( e ).mul( u( a.equal( 22 ), 1, 0 ) ) ).add( le( e ).mul( u( a.equal( 23 ), 1, 0 ) ) ).add( me( e ).mul( u( a.equal( 24 ), 1, 0 ) ) ).toVar(); return o.assign( u( t.isolated, o.smoothstep( 0, 1 ).mul( 2*Math.PI ).sub( Math.PI ).cos().add( 1 ).div( 2 ).pow( 1/4 ).mul( 1.1 ).negate(), o.clamp( 0, 1 ).pow( .75 ).negate() ) ), m( 0, o.div( 2 ), o.div( 1 ) );

	} ) ), be=e( ( ()=>{

		var e=n, t=s( 0 ).add( e.x.mul( 72 ).cos().smoothstep( .9, 1 ) ).add( e.y.mul( 74 ).cos().smoothstep( .9, 1 ) ).add( e.z.mul( 74 ).add( e.y.mul( 4.5 ).add( .5 ).cos().mul( 1 ).add( 2.5 ) ).abs().smoothstep( .6, 0 ) ).smoothstep( .6, 1 ).oneMinus().pow( .1 ); return m( t );

	} ) ); function ke() {

	return { head: a( m( 0, 0, 0 ) ), chest: a( m( 0, 0, 0 ) ), waist: a( m( 0, 0, 0 ) ), kneeLeft: a( m( 0, 0, 0 ) ), kneeRight: a( m( 0, 0, 0 ) ), ankleLeft: a( m( 0, 0, 0 ) ), ankleRight: a( m( 0, 0, 0 ) ), footLeft: a( m( 0, 0, 0 ) ), footRight: a( m( 0, 0, 0 ) ), hipLeft: a( m( 0, 0, 0 ) ), hip2Left: a( m( 0, 0, 0 ) ), hipRight: a( m( 0, 0, 0 ) ), hip2Right: a( m( 0, 0, 0 ) ), legLeft: a( m( 0, 0, 0 ) ), legRight: a( m( 0, 0, 0 ) ), elbowLeft: a( m( 0, 0, 0 ) ), elbowRight: a( m( 0, 0, 0 ) ), forearmLeft: a( m( 0, 0, 0 ) ), forearmRight: a( m( 0, 0, 0 ) ), wristLeft: a( m( 0, 0, 0 ) ), wristRight: a( m( 0, 0, 0 ) ), armLeft: a( m( 0, 0, 0 ) ), armRight: a( m( 0, 0, 0 ) ) };

}

export { W as createGui, z as credits, b as matRotXYZ, k as matRotXZY, x as matRotYXZ, w as matRotYZX, M as matRotZXY, P as matRotZYX, S as processModel, N as scene, be as tslColorNode, we as tslEmissiveNode, xe as tslNormalNode, Re as tslPositionNode, ke as tslPosture };
