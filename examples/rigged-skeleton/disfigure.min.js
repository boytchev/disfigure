/*! disfigure v0.0.9 */
import { Vector3 as a, MeshPhysicalNodeMaterial as e, Box3 as s, Mesh as t } from "three"; import { uniform as d, normalGeometry as h, mat3 as i, vec3 as l, float as m, If as n, Fn as o, positionGeometry as p, mix as r, select as u, transformNormalToView as y } from "three/tsl"; const z=o( ( ([ t ])=>{

		var e=t.cos().toVar(), a=t.sin().toVar(); return i( 1, 0, 0, 0, e, a, 0, a.negate(), e );

	} ) ).setLayout( { name: "matRotX", type: "mat3", inputs: [ { name: "angle", type: "float" } ] } ), f=o( ( ([ t ])=>{

		var e=t.cos().toVar(), a=t.sin().toVar(); return i( e, 0, a.negate(), 0, 1, 0, a, 0, e );

	} ) ).setLayout( { name: "matRotY", type: "mat3", inputs: [ { name: "angle", type: "float" } ] } ), g=o( ( ([ t ])=>{

		var e=t.cos().toVar(), a=t.sin().toVar(); return i( e, a, 0, a.negate(), e, 0, 0, 0, 1 );

	} ) ).setLayout( { name: "matRotZ", type: "mat3", inputs: [ { name: "angle", type: "float" } ] } ), v=o( ( ([ t ])=>{

		var e=z( t.x ), a=f( t.y ), s=g( t.z ); return a.mul( e ).mul( s );

	} ) ).setLayout( { name: "matRotYXZ", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), c=o( ( ([ t ])=>{

		var e=z( t.x ), a=f( t.y ), s=g( t.z ); return a.mul( s ).mul( e );

	} ) ).setLayout( { name: "matRotYZX", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), x=o( ( ([ t ])=>{

		var e=z( t.x ), a=f( t.y ), s=g( t.z ); return e.mul( a ).mul( s );

	} ) ).setLayout( { name: "matRotXYZ", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), w=o( ( ([ t ])=>{

		var e=z( t.x ), a=f( t.y ), s=g( t.z ); return e.mul( s ).mul( a );

	} ) ).setLayout( { name: "matRotXZY", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), L=o( ( ([ t ])=>{

		var e=z( t.x ), a=f( t.y ); return g( t.z ).mul( e ).mul( a );

	} ) ).setLayout( { name: "matRotZXY", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ), R=o( ( ([ t ])=>{

		var e=z( t.x ), a=f( t.y ); return g( t.z ).mul( a ).mul( e );

	} ) ).setLayout( { name: "matRotZYX", type: "mat3", inputs: [ { name: "angles", type: "vec3" } ] } ); function k( o, i, r, m ) {

	return function ( e ) {

		var a=[]; e.traverse( ( e=>{

			if ( e.isMesh ) {

				var s=e.geometry.clone().applyMatrix4( e.matrixWorld ), o=e.material.clone(); a.push( new t( s, o ) );

			}

		} ) ), e.clear(), e.position.set( 0, 0, 0 ), e.rotation.set( 0, 0, 0, "XYZ" ), e.scale.set( 1, 1, 1 ), e.add( ...a );

	}( o ), function ( t, a, s, o ) {

		t.traverse( ( t=>{

			if ( t.isMesh ) {

				var i=new e(); Object.assign( i, t.material ), i.metalness=.1, i.roughness=.6, i.metalness=0, i.roughness=1, o.colorNode&&( i.colorNode=o.colorNode() ), o.positionNode&&( i.positionNode=o.positionNode( { skeleton: a, posture: s } ) ), o.normalNode&&( i.normalNode=o.normalNode( { skeleton: a, posture: s } ) ), o.emissiveNode&&( i.emissiveNode=o.emissiveNode( { skeleton: a, posture: s } ) ), t.material=i;

			}

		} ) );

	}( o, i, r, m ), function ( t ) {

		var e=new a(), o=( new s() ).setFromObject( t, !0 ); console.log( "x", o.min.x.toFixed( 4 ), o.max.x.toFixed( 4 ) ), console.log( "y", o.min.y.toFixed( 4 ), o.max.y.toFixed( 4 ) ), console.log( "z", o.min.z.toFixed( 4 ), o.max.z.toFixed( 4 ) ), o.getCenter( e ), t.position.sub( e );

	}( o ), o;

}

function b( t, e ) {

	var a=new XMLHttpRequest(); a.onreadystatechange=function () {

		4==this.readyState&&200==this.status&&( document.getElementById( e ).innerHTML=this.responseText.split( "||" )[ 0 ]);

	}, ( t=t.split( "." ) ).pop(), t.push( "txt" ), t=t.join( "." ), a.open( "GET", t, !0 ), a.send();

}

class Y {

	constructor( t, e, s, o, i ) {

		this.pivot=new a( t, e, s ), this.mirrorPivot=new a( -t, e, s ), this.min=o, this.max=i;

	}

} class F extends Y {

	fuzzy() {

		return p.y.smoothstep( this.min, this.max );

	}

} class X extends Y {

	constructor( t, e, a, s, o, i ) {

		super( t, e, a, s, o ), this.slope=Math.tan( ( 90-i )*Math.PI/180 );

	}fuzzy() {

		return p.y.add( p.z.div( this.slope ) ).smoothstep( this.min, this.max );

	}

} class q extends Y {

	fuzzy() {

		return p.x.smoothstep( this.min, this.max );

	}mirrorFuzzy() {

		return p.x.smoothstep( -this.min, -this.max );

	}

} class P extends Y {

	constructor( t, e, a, s, o, i, r ) {

		super( t, e, a, s, o ), this.minY=i, this.maxY=r;

	}fuzzy() {

		var t=p.x.smoothstep( this.min, this.max ), e=p.y.smoothstep( this.minY, this.maxY ); return t.mul( e );

	}mirrorFuzzy() {

		var t=p.x.smoothstep( -this.min, -this.max ), e=p.y.smoothstep( this.minY, this.maxY ); return t.mul( e );

	}

} class V extends Y {

	constructor( t, e, a, s, o, i, r, m ) {

		super( t, e, a, s, o ), this.topY=i, this.minX=r, this.maxX=m;

	}fuzzy() {

		var t=p.x.toVar(), e=p.y; return e.step( this.topY ).mul( t.smoothstep( this.minX, this.maxX ) ).mul( e.smoothstep( t.div( .7 ).add( this.min ), t.div( 7 ).add( this.max ) ) ).pow( 2 );

	}mirrorFuzzy() {

		var t=p.x, e=p.y; return e.step( this.topY ).mul( t.smoothstep( -this.minX, -this.maxX ) ).mul( e.smoothstep( t.div( -.7 ).add( this.min ), t.div( -7 ).add( this.max ) ) ).pow( 2 );

	}

} var N=o( ( ([ t, e, a, s ])=>t.sub( e ).mul( v( a.mul( s ) ) ).add( e ) ) ).setLayout( { name: "jointRotate", type: "vec3", inputs: [ { name: "pos", type: "vec3" }, { name: "center", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ), M=o( ( ([ t, e, a, s ])=>r( t, t.sub( e ).mul( w( a.mul( s ) ) ).mul( m( 1 ).sub( s.mul( 2*Math.PI ).sub( Math.PI ).cos().add( 1 ).div( 2 ).div( 4 ).mul( a.z.cos().oneMinus() ) ) ).add( e ), s.pow( .25 ) ) ) ).setLayout( { name: "jointRotate2", type: "vec3", inputs: [ { name: "pos", type: "vec3" }, { name: "center", type: "vec3" }, { name: "angle", type: "vec3" }, { name: "amount", type: "float" } ] } ); function T( t ) {

	return t.vertex=p, t.mode=m( 1 ), j( t );

}

function Z( t ) {

	return t.vertex=h, t.mode=m( 0 ), y( j( t ) ).normalize();

}

var j=o( ( ( { skeleton: t, posture: e, mode: a, vertex: s } )=>{

		var o=s.toVar(), i=t.arm.fuzzy().toVar(); n( i.greaterThan( 0 ), ( ()=>{

			o.assign( N( o, a.mul( t.wrist.pivot ), e.wristLeft, t.wrist.fuzzy() ) ), o.assign( N( o, a.mul( t.forearm.pivot ), e.forearmLeft, t.forearm.fuzzy() ) ), o.assign( N( o, a.mul( t.elbow.pivot ), e.elbowLeft, t.elbow.fuzzy() ) ), o.assign( M( o, a.mul( t.arm.pivot ), e.armLeft, i ) );

		} ) ); var r=t.arm.mirrorFuzzy().toVar(); n( r.greaterThan( 0 ), ( ()=>{

			o.assign( N( o, a.mul( t.wrist.mirrorPivot ), e.wristRight, t.wrist.mirrorFuzzy() ) ), o.assign( N( o, a.mul( t.forearm.mirrorPivot ), e.forearmRight, t.forearm.mirrorFuzzy() ) ), o.assign( N( o, a.mul( t.elbow.mirrorPivot ), e.elbowRight, t.elbow.mirrorFuzzy() ) ), o.assign( M( o, a.mul( t.arm.mirrorPivot ), e.armRight, r ) );

		} ) ), o.assign( N( o, a.mul( t.head.pivot ), e.head, t.head.fuzzy() ) ), o.assign( N( o, a.mul( t.chest.pivot ), e.chest, t.chest.fuzzy() ) ), o.assign( N( o, a.mul( t.waist.pivot ), e.waist, t.waist.fuzzy() ) ); var m=t.hip.fuzzy().toVar(); n( m.greaterThan( 0 ), ( ()=>{

			o.assign( N( o, a.mul( t.foot.pivot ), e.footLeft, t.foot.fuzzy() ) ), o.assign( N( o, a.mul( t.ankle.pivot ), e.ankleLeft, t.ankle.fuzzy() ) ), o.assign( N( o, a.mul( t.leg.pivot ), e.legLeft, t.leg.fuzzy() ) ), o.assign( N( o, a.mul( t.knee.pivot ), e.kneeLeft, t.knee.fuzzy() ) ), o.assign( N( o, a.mul( t.hip2.pivot ), e.hip2Left, t.hip2.fuzzy() ) ), o.assign( N( o, a.mul( t.hip.pivot ), e.hipLeft, m ) );

		} ) ); var u=t.hip.mirrorFuzzy().toVar(); return n( u.greaterThan( 0 ), ( ()=>{

			o.assign( N( o, a.mul( t.foot.mirrorPivot ), e.footRight, t.foot.fuzzy() ) ), o.assign( N( o, a.mul( t.ankle.mirrorPivot ), e.ankleRight, t.ankle.fuzzy() ) ), o.assign( N( o, a.mul( t.leg.mirrorPivot ), e.legRight, t.leg.fuzzy() ) ), o.assign( N( o, a.mul( t.knee.mirrorPivot ), e.kneeRight, t.knee.fuzzy() ) ), o.assign( N( o, a.mul( t.hip2.mirrorPivot ), e.hip2Right, t.hip2.fuzzy() ) ), o.assign( N( o, a.mul( t.hip.mirrorPivot ), e.hipRight, u ) );

		} ) ), o;

	} ) ), I=o( ( ( { skeleton: t, posture: e } )=>{

		var a=e.select, s=m( 0 ).add( t.head.fuzzy().mul( u( a.equal( 1 ), 1, 0 ) ) ).add( t.chest.fuzzy().mul( u( a.equal( 2 ), 1, 0 ) ) ).add( t.waist.fuzzy().mul( u( a.equal( 3 ), 1, 0 ) ) ).add( t.hip.fuzzy().mul( u( a.equal( 11 ), 1, 0 ) ) ).add( t.leg.fuzzy().mul( u( a.equal( 12 ), 1, 0 ) ) ).add( t.knee.fuzzy().mul( u( a.equal( 13 ), 1, 0 ) ) ).add( t.ankle.fuzzy().mul( u( a.equal( 14 ), 1, 0 ) ) ).add( t.foot.fuzzy().mul( u( a.equal( 16 ), 1, 0 ) ) ).add( t.hip2.fuzzy().mul( u( a.equal( 15 ), 1, 0 ) ) ).add( t.arm.fuzzy().mul( u( a.equal( 21 ), 1, 0 ) ) ).add( t.elbow.fuzzy().mul( u( a.equal( 22 ), 1, 0 ) ) ).add( t.forearm.fuzzy().mul( u( a.equal( 23 ), 1, 0 ) ) ).add( t.wrist.fuzzy().mul( u( a.equal( 24 ), 1, 0 ) ) ).clamp( 0, 1 ).negate().toVar(); return n( s.lessThan( -.999 ), ( ()=>{

			s.assign( .2 );

		} ) ), l( 0, s.div( 2 ), s.div( 1 ) );

	} ) ), E=o( ( ()=>{

		var t=p, e=m( 0 ).add( t.x.mul( 72 ).cos().smoothstep( .9, 1 ) ).add( t.y.mul( 74 ).cos().smoothstep( .9, 1 ) ).add( t.z.mul( 74 ).add( t.y.mul( 4.5 ).add( .5 ).cos().mul( 1 ).add( 2.5 ) ).abs().smoothstep( .6, 0 ) ).smoothstep( .6, 1 ).oneMinus().pow( .1 ); return l( e );

	} ) ); function H() {

	return { head: d( l( 0, 0, 0 ) ), chest: d( l( 0, 0, 0 ) ), waist: d( l( 0, 0, 0 ) ), kneeLeft: d( l( 0, 0, 0 ) ), kneeRight: d( l( 0, 0, 0 ) ), ankleLeft: d( l( 0, 0, 0 ) ), ankleRight: d( l( 0, 0, 0 ) ), footLeft: d( l( 0, 0, 0 ) ), footRight: d( l( 0, 0, 0 ) ), hipLeft: d( l( 0, 0, 0 ) ), hip2Left: d( l( 0, 0, 0 ) ), hipRight: d( l( 0, 0, 0 ) ), hip2Right: d( l( 0, 0, 0 ) ), legLeft: d( l( 0, 0, 0 ) ), legRight: d( l( 0, 0, 0 ) ), elbowLeft: d( l( 0, 0, 0 ) ), elbowRight: d( l( 0, 0, 0 ) ), forearmLeft: d( l( 0, 0, 0 ) ), forearmRight: d( l( 0, 0, 0 ) ), wristLeft: d( l( 0, 0, 0 ) ), wristRight: d( l( 0, 0, 0 ) ), armLeft: d( l( 0, 0, 0 ) ), armRight: d( l( 0, 0, 0 ) ) };

}

export { V as LocusT, q as LocusX, P as LocusXY, F as LocusY, X as LocusYZ, b as credits, x as matRotXYZ, w as matRotXZY, v as matRotYXZ, c as matRotYZX, L as matRotZXY, R as matRotZYX, k as processModel, E as tslColorNode, I as tslEmissiveNode, Z as tslNormalNode, T as tslPositionNode, H as tslPosture };
